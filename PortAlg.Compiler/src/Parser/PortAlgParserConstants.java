/* Generated By:JavaCC: Do not edit this line. PortAlgParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PortAlgParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 10;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 11;
  /** RegularExpression Id. */
  int ALGORITMO = 13;
  /** RegularExpression Id. */
  int VAR = 14;
  /** RegularExpression Id. */
  int INICIO = 15;
  /** RegularExpression Id. */
  int FIMALGORITMO = 16;
  /** RegularExpression Id. */
  int INTEIRO = 17;
  /** RegularExpression Id. */
  int LOGICO = 18;
  /** RegularExpression Id. */
  int LITERAL = 19;
  /** RegularExpression Id. */
  int VETOR = 20;
  /** RegularExpression Id. */
  int DE = 21;
  /** RegularExpression Id. */
  int VERDADEIRO = 22;
  /** RegularExpression Id. */
  int FALSO = 23;
  /** RegularExpression Id. */
  int ESCREVA = 24;
  /** RegularExpression Id. */
  int ESCREVAL = 25;
  /** RegularExpression Id. */
  int LEIA = 26;
  /** RegularExpression Id. */
  int SE = 27;
  /** RegularExpression Id. */
  int ENTAO = 28;
  /** RegularExpression Id. */
  int FIMSE = 29;
  /** RegularExpression Id. */
  int SENAO = 30;
  /** RegularExpression Id. */
  int REPITA = 31;
  /** RegularExpression Id. */
  int ATE = 32;
  /** RegularExpression Id. */
  int ENQUANTO = 33;
  /** RegularExpression Id. */
  int FACA = 34;
  /** RegularExpression Id. */
  int FIMENQUANTO = 35;
  /** RegularExpression Id. */
  int PARA = 36;
  /** RegularExpression Id. */
  int FIMPARA = 37;
  /** RegularExpression Id. */
  int NULL = 38;
  /** RegularExpression Id. */
  int VOID = 39;
  /** RegularExpression Id. */
  int CASO = 40;
  /** RegularExpression Id. */
  int PARAR = 41;
  /** RegularExpression Id. */
  int PADRAO = 42;
  /** RegularExpression Id. */
  int ESCOLHA = 43;
  /** RegularExpression Id. */
  int RETORNA = 44;
  /** RegularExpression Id. */
  int DECIMAL = 45;
  /** RegularExpression Id. */
  int CONTINUAR = 46;
  /** RegularExpression Id. */
  int FIMESCOLHA = 47;
  /** RegularExpression Id. */
  int FUNCAO = 48;
  /** RegularExpression Id. */
  int FIMFUNCAO = 49;
  /** RegularExpression Id. */
  int PASSO = 50;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 51;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 52;
  /** RegularExpression Id. */
  int EXPONENT = 53;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 54;
  /** RegularExpression Id. */
  int STRING_LITERAL = 55;
  /** RegularExpression Id. */
  int LPAREN = 56;
  /** RegularExpression Id. */
  int RPAREN = 57;
  /** RegularExpression Id. */
  int LBRACE = 58;
  /** RegularExpression Id. */
  int RBRACE = 59;
  /** RegularExpression Id. */
  int LBRACKET = 60;
  /** RegularExpression Id. */
  int RBRACKET = 61;
  /** RegularExpression Id. */
  int COMMA = 62;
  /** RegularExpression Id. */
  int DOT = 63;
  /** RegularExpression Id. */
  int DOUBLEDOT = 64;
  /** RegularExpression Id. */
  int DDOTS = 65;
  /** RegularExpression Id. */
  int ASSIGN = 66;
  /** RegularExpression Id. */
  int GT = 67;
  /** RegularExpression Id. */
  int LT = 68;
  /** RegularExpression Id. */
  int EQ = 69;
  /** RegularExpression Id. */
  int NE = 70;
  /** RegularExpression Id. */
  int LE = 71;
  /** RegularExpression Id. */
  int GE = 72;
  /** RegularExpression Id. */
  int SC_OR = 73;
  /** RegularExpression Id. */
  int SC_AND = 74;
  /** RegularExpression Id. */
  int INCR = 75;
  /** RegularExpression Id. */
  int DECR = 76;
  /** RegularExpression Id. */
  int PLUS = 77;
  /** RegularExpression Id. */
  int MINUS = 78;
  /** RegularExpression Id. */
  int STAR = 79;
  /** RegularExpression Id. */
  int SLASH = 80;
  /** RegularExpression Id. */
  int CSLASH = 81;
  /** RegularExpression Id. */
  int XOR = 82;
  /** RegularExpression Id. */
  int REM = 83;
  /** RegularExpression Id. */
  int PLUSASSIGN = 84;
  /** RegularExpression Id. */
  int MINUSASSIGN = 85;
  /** RegularExpression Id. */
  int STARASSIGN = 86;
  /** RegularExpression Id. */
  int SLASHASSIGN = 87;
  /** RegularExpression Id. */
  int ANDASSIGN = 88;
  /** RegularExpression Id. */
  int ORASSIGN = 89;
  /** RegularExpression Id. */
  int XORASSIGN = 90;
  /** RegularExpression Id. */
  int REMASSIGN = 91;
  /** RegularExpression Id. */
  int IDENTIFIER = 92;
  /** RegularExpression Id. */
  int LETTER = 93;
  /** RegularExpression Id. */
  int DIGIT = 94;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"algoritmo\"",
    "\"var\"",
    "\"inicio\"",
    "\"fimalgoritmo\"",
    "\"inteiro\"",
    "\"logico\"",
    "\"literal\"",
    "\"vetor\"",
    "\"de\"",
    "\"verdadeiro\"",
    "\"falso\"",
    "\"escreva\"",
    "\"escreval\"",
    "\"leia\"",
    "\"se\"",
    "\"entao\"",
    "\"fimse\"",
    "\"senao\"",
    "\"repita\"",
    "\"ate\"",
    "\"enquanto\"",
    "\"faca\"",
    "\"fimenquanto\"",
    "\"para\"",
    "\"fimpara\"",
    "\"null\"",
    "\"void\"",
    "\"caso\"",
    "\"parar\"",
    "\"padrao\"",
    "\"escolha\"",
    "\"retorna\"",
    "\"real\"",
    "\"continuar\"",
    "\"fimescolha\"",
    "\"funcao\"",
    "\"fimfuncao\"",
    "\"passo\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "\"..\"",
    "\":\"",
    "\"<-\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"<>\"",
    "\"<=\"",
    "\">=\"",
    "\"ou\"",
    "\"e\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"\\\\\"",
    "\"^\"",
    "\"%\"",
    "\"+<-\"",
    "\"-<-\"",
    "\"*<-\"",
    "\"/<-\"",
    "\"&<-\"",
    "\"|<-\"",
    "\"^<-\"",
    "\"%<-\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
