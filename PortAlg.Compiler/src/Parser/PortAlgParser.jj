//javacc_options
PARSER_BEGIN(PortAlgParser)

import AST.*;
import java.util.UUID;
import java.util.ArrayList;

class PortAlgParser{
	 public static void main(String args[]) {
    PortAlgParser parser;
	int version = 0;
	int rebuild = 0;
	int commit = 10;
    if (args.length == 0) {
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Reading from standard input . . .");
      parser = new PortAlgParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Reading from file " + args[0] + " . . .");
      try {
        parser = new PortAlgParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Usage is one of:");
      System.out.println("         java PortAlgParser < inputfile");
      System.out.println("OR");
      System.out.println("         java PortAlgParser inputfile");
      return;
    }
    try {
      parser.Specification();
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Algol file parsed successfully.");
    } catch (ParseException e) {
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Encountered errors during parse.");
	  System.out.println(e.getMessage());
    }
  }
}

PARSER_END (PortAlgParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/*TOKENS*/
TOKEN :
{
  < ALGORITMO: "algoritmo" >
| < VAR: "var" >
| < INICIO: "inicio" >
| < FIMALGORITMO: "fimalgoritmo" >
| < INTEIRO: "inteiro">
| < LOGICO: "logico">
| <LITERAL: "literal">
| <VETOR: "vetor">
| <DE: "de">
| <VERDADEIRO: "verdadeiro">
| <FALSO: "falso">
| <ESCREVA: "escreva">
| <ESCREVAL: "escreval">
| <LEIA: "leia">
| <SE: "se">
| <ENTAO: "entao">
| <FIMSE: "fimse">
| <SENAO: "senao">
| <REPITA: "repita">
| <ATE: "ate">
| <ENQUANTO: "enquanto">
| <FACA: "faca">
| <FIMENQUANTO: "fimenquanto">
| <PARA: "para">
| <FIMPARA: "fimpara">
| <NULL: "null">
| <VOID: "void">
| <CASO: "caso">
| <PARAR: "parar">
| <PADRAO: "padrao">
| <ESCOLHA: "escolha">
| <RETORNA: "retorna">
| <DECIMAL: "real">
| <CONTINUAR: "continuar">
| <FIMESCOLHA: "fimescolha">
| <FUNCAO: "funcao">
| <FIMFUNCAO: "fimfuncao">
| <PASSO: "passo">
}

/*LITERALS*/
TOKEN :
{
  < INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])*  >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ <DOT> (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | <DOT> (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COMMA: "," >
| < DOT: "." >
| <DOUBLEDOT: "..">
| <DDOTS: ":">
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "<-" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "=" >
| < NE: "<>" >
| < LE: "<=" >
| < GE: ">=" >
| < SC_OR: "ou" >
| < SC_AND: "e" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < CSLASH: "\\" >
| < XOR: "^" >
| < REM: "%" >
| < PLUSASSIGN: "+<-" >
| < MINUSASSIGN: "-<-" >
| < STARASSIGN: "*<-" >
| < SLASHASSIGN: "/<-" >
| < ANDASSIGN: "&<-" >
| < ORASSIGN: "|<-" >
| < XORASSIGN: "^<-" >
| < REMASSIGN: "%<-" >
}

TOKEN :
{
	< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|  < #LETTER: ["_","a"-"z","A"-"Z"] >
|  < #DIGIT: ["0"-"9"] >
}

/*PROGRAM SPECIFICATION*/

 SPCompilationUnit Specification() :
{
  Token token = null;
  SPCompilationUnit compilationUnit = null;
  int line = 0;
  String fileName = "";
  ArrayList<SPStatement> arrayInitializers = new ArrayList<SPStatement>();
  ArrayList<SPMember> classBody = new ArrayList<SPMember>();
  ArrayList<String> mods = new ArrayList<String>(Arrays.asList("public", "static"));
  ArrayList<SPVariableDeclarator> variables;
  SPFieldDeclaration fields;
  ArrayList<SPStatement> statements = new ArrayList<SPStatement>();
  SPStatement aStatement;
  ArrayList<SPFormalParameter> formalParameters = new ArrayList<SPFormalParameter>();
  String[] methodArgs = new String[1];
  Type methodArgsType;
  SPFormalParameter formalParameter;
  SPMember memberDecl;
  SPAST aClass;
  ArrayList<SPAST> typeDeclarations = new ArrayList<SPAST>();
  SPBlock body;
}
{
  <ALGORITMO> 
  {
    line = token.beginLine; 
    fileName = UUID.randomUUID().toString();
  }
  (<STRING_LITERAL>)*
	(Function())*
	{ 
  variables = VariableInitializer(arrayInitializers);
  try {
    variables.add(new SPVariableDeclarator(0, "sp_inner_scanner", Type.typeFor(Class.forName("java.util.Scanner"))));
  } catch (ClassNotFoundException ex) {
  }
   fields = new SPFieldDeclaration(line, mods, variables);
   classBody.add(fields);
  }
	"inicio" 
  { 
   statements.add(new SPScannerDeclarator());
   statements.addAll(arrayInitializers);
  }
	(statement = Statement()
  { statements.add(statement); })*
  
  { body = new SPBlock(line, statements); }
	"fimalgoritmo"
  {
        methodArgsType = Type.typeFor(methodArgs.getClass());

        formalParameter = new SPFormalParameter(line, "args", methodArgsType);

        formalParameters.add(formalParameter);

        memberDecl = new SPMethodDeclaration(line, mods, "main", Type.VOID, formalParameters, body);

        classBody.add(memberDecl);

        aClass = typeDeclaration(fileName, classBody);

        typeDeclarations.add(aClass);
  
        return new SPCompilationUnit(fileName, line, null, null, typeDeclarations);
  }
}

void Function() :
{}
{
	"funcao"
	["var"]
	VariableDeclarations()
	(Statement())*
	"fimfuncao"
}

/*PROGRAM SPECIFICATION*/

/*VARIABLES DECLARATION BLOCK*/

ArrayList<SPVariableDeclarator> VariableInitializer(ArrayList<SPStatement> arrayInitializers):
{}
{
	"var" 
	{ return VariableDeclarations(arrayInitializers); }
}

ArrayList<SPVariableDeclarator> VariableDeclarations(ArrayList<SPStatement> arrayInitializers) :
{
  ArrayList<SPVariableDeclarator> variables = new ArrayList<SPVariableDeclarator>();
  ArrayList<SPVariableDeclarator> typeVariables = null;
  Type type = null;
  ArrayList<SPExpression> dimensionsBounds = new ArrayList<SPExpression>();
  ArrayList<SPExpression> lowerBounds = new ArrayList<SPExpression>();
  int line = 0;
  SPExpression lowerBound = null;
  SPExpression upperBound = null;
  SPExpression dimensionBounds = null;
  boolean isArray = false;
  SPNewArrayOp newArray = null;
  SPExpression lhs = null;
  SPAssignment assignmentExpression = null;
}
{
    (
      LOOKAHEAD(2)
      (
        { typeVariables = VariableDeclaratorId(); } ":" 
                [
                  <VETOR> { line = token.beginLine; isArray = true; }
                  <LBRACKET> 
                  <INTEGER_LITERAL> { lowerBound = new SPLiteralInt(token.beginLine, token.image); }
                  <DOUBLEDOT> 
                  <INTEGER_LITERAL> {
                                      upperBound = new SPLiteralInt(token.beginLine, token.image);
                                       dimensionBounds = new SPPlusOp(token.beginLine, new SPSubtractOp(token.beginLine, upperBound, lowerBound), new SPLiteralInt(token.beginLine, "1"));
                                      dimensionsBounds.add(dimensionBounds); 
                                     }
                  [ 
                    <COMMA> 
                    <INTEGER_LITERAL> { lowerBound = new SPLiteralInt(token.beginLine, token.image); }
                    <DOUBLEDOT> 
                    <INTEGER_LITERAL> {
                                      upperBound = new SPLiteralInt(token.beginLine, token.image);
                                       dimensionBounds = new SPPlusOp(token.beginLine, new SPSubtractOp(token.beginLine, upperBound, lowerBound), new SPLiteralInt(token.beginLine, "1"));
                                      dimensionsBounds.add(dimensionBounds); 
                                     }
                  ]
                  <RBRACKET>
                  <DE>
                 ]
               { 
                type = Type();
                
                if(isArray){
                  type = new ArrayTypeName(type, dimensionsBounds.size());
                  newArray = new SPNewArrayOp(line, type, dimensionsBounds, lowerBounds);
                }
                
                for(SPVariableDeclarator variable : typeVariables){
                  variable.setType(type);
                  variables.add(variable);
                  
                  if(isArray){
                    lhs = new SPVariable(variable.line(), variable.getName());
                    assignmentExpression = new SPAssignOp(variable.line(), null, null);
                    assignmentExpression.setLhs(lhs);
                    assignmentExpression.setRhs(newArray);
                    assignmentExpression.isStatementExpression = true;
                    arrayInitializers.add(new SPStatementExpression(variable.line(), assignmentExpression));
                  }
                }
                 
               }))*
     { return variables; }
}

ArrayList<SPVariableDeclarator> VariableDeclaratorId() :
{}
{
  { return NameList(); }
}

ArrayList<SPVariableDeclarator> NameList() :
{
ArrayList<SPVariableDeclarator> variables = new ArrayList<SPVariableDeclarator>();
SPVariableDeclarator variable = null;
}
{
    variable = Name()
    { variables.add(variable); }
  
   (
    LOOKAHEAD(2) <COMMA>
      variable = Name()
      { variables.add(variable); } 
   )*
   
    { return variables; }
   
}

SPVariableDeclarator Name() :
{
int line = 0;
String name = "";
}
{
   <IDENTIFIER> 
   {
   line = token.beginLine;
   name = token.image;
   }
    
    {return new SPVariableDeclarator(line, name, null);}
}

Type Type() :
{
Type type;
}
{
   <LOGICO>
   { type = Type.BOOLEAN; }
|
  <INTEIRO>
  { type = Type.INT; }
|
  <DECIMAL>
  { type = Type.DOUBLE; }
|
  <LITERAL>
  { type = Type.STRING; }
  
 {return type; }
}

/*VARIABLES DECLARATION BLOCK*/

/*STATEMENTS*/

SPStatement Statement() :
{
SPStatement statement = null;
}
{
 LOOKAHEAD(2)
 statement = StatementExpression()
|
  statement = SwitchStatement()
|
  statement = IfStatement()
|
  statement = WhileStatement()
|
  statement = DoStatement()
|
  statement = ForStatement()
|
  statement = BreakStatement()
|
  statement = ContinueStatement()
|
  statement = WriteStatement()
|
  statement = ReadStatement()
  
  {return statement; }
}

void StatementExpression() :
{
SPExpression lhs;
int line;
SPAssignment assignmentExpression;
SPExpression rhs;

}
{
  lhs = UnaryExpression()
  { line = token.beginLine; }
  assignmentExpression = AssignmentOperator()
  rhs = Expression()
  {
    assignmentExpression.setLhs(lhs);
    assignmentExpression.setRhs(rhs);

    return new SPStatementExpression(line, assignmentExpression);
  }
}

SPAssignment AssignmentOperator() :
{
  SPAssignment assignExpression;
}
{
  <ASSIGN> 
  {
    assignExpression = new SPAssignOp(token.beginLine, null, null);
    assignExpression.isStatementExpression = true;
  }
 | "*<-" 
 | "/<-" 
 | "%<-" 
 | "+<-" 
 | "-<-" 
 | "&<-" 
 | "^<-" 
 | "|<-"
 {
  return assignExpression;
 }
}

SPExpression Expression() :
{}
{
	{ return ConditionalOrExpression(); }
}

SPExpression ConditionalOrExpression() :
{
int line;
SPExpression lhs;
SPExpression rhs;
}
{
  lhs = ConditionalAndExpression() 
  ( 
    <SC_OR> 
    {
      rhs = ConditionalAndExpression();
      lhs = new SPLogicalOrOp(line, lhs, rhs);
    } 
  )*
  
  { return lhs; }
}

SPExpression ConditionalAndExpression() :
{
  int line;
  SPExpression lhs;
  SPExpression rhs;
}
{
  lhs = EqualityExpression() 
  ( 
    <SC_AND>
    { 
      rhs = EqualityExpression();
      lhs = new SPLogicalAndOp(line, lhs, rhs);
    } 
  )*
  {return lhs;}
}

SPExpression EqualityExpression() :
{
  int line;
  SPExpression lhs;
  SPExpression rhs;
  boolean equal = false;
}
{
  lhs = RelationalExpression() 
  ( 
    ( <EQ> { equal = true; }
    | <NE> { equal = false; }
    ) 
    { 
      rhs = RelationalExpression();
      if(equal){
        lhs = new SPEqualOp(line, lhs, rhs);
      } else{
        lhs = new SPNotEqualOp(line, lhs, rhs);
      }
    }     
  )*
  
  { return lhs; }
}

SPExpression RelationalExpression() :
{
  int line;
  SPExpression lhs;
  SPExpression rhs;
  int operation = 0;
}
{
  lhs = AdditiveExpression() 
  ( 
    ( <LT> {operation = 1; }
    | <GT> {operation = 2; }
    | <LE> {operation = 3; }
    | <GE> {operation = 4; }
    ) 
    { 
      rhs = AdditiveExpression();
      switch(operation){
        case 1 : { lhs = new SPLessThanOp(line, lhs, rhs);
                   break; }
        case 2 : { lhs = new SPGreaterThanOp(line, lhs, rhs);
                   break; }
        case 3 : { lhs = new SPLessEqualOp(line, lhs, rhs);
                   break; }
        default : { lhs = new SPGreaterOp(line, lhs, rhs);
                   break; }
      }
     }
  )*
  
  { return lhs; }
}

SPExpression AdditiveExpression() :
{
int line;
SPExpression lhs;
SPExpression rhs;
boolean sum = false;
}
{
  lhs = MultiplicativeExpression() 
  (
    LOOKAHEAD(2)
     ( <PLUS> { sum = true; }
     | <MINUS> {sum = false; }
     ) 
     { 
        rhs = MultiplicativeExpression();
        if(sum){
          lhs = new SPPlusOp(line, lhs, rhs);
        } else {
          lhs = new SPSubtractOp(line, lhs, rhs);
        }
      }
  )*
  { return lhs; }
}

SPExpression MultiplicativeExpression() :
{
  int line;
  SPExpression lhs;
  SPExpression rhs;
}
{
  lhs = PowerExpression()
    ( 
      ( "*" { lhs = new SPMultiplyOp(line, lhs, null); } 
      | "/" { lhs = new SPDivisionOp(line, lhs, null); }
      | "%" { lhs = new SPMultiplyOp(line, lhs, null); } //TODO: FAZER UMA OP PARA RESTO DA DIVISÃO INTEIRA (SO APLICAVEL PARA OPERANDOS INTEIROS
      | "\\" { lhs = new SPMultiplyOp(line, lhs, null); } //TODO: FAZER UMA OP PARA QUOCIENTE DA DIVISÃO (SO APLICAVEL PARA OPERANDOS INTEIROS)
      ) 
      { 
        rhs = PowerExpression(); 
        lhs.setRhs(rhs);
      } 
    )*
    
  { return lhs; }
}

SPExpression PowerExpression() :
{
int line;
SPExpression lhs;
SPExpression rhs;
}
{
	lhs = UnaryExpression() 
  
  //TODO: fazer funcionar a potenciacao
  //[
  //  <XOR>
  //   PowerExpression()
  //]
  
  {return lhs; }
}

SPExpression UnaryExpression() :
{
  int line;
  SPExpression expr;
}
{
  ( 
    "+" 
  | "-" //TODO: negar expressao
  ) 
  { expr = UnaryExpression(); }
|
  { expr = PostfixExpression(); }
  
{return expr; }
}

SPExpression PostfixExpression() : 
{
  SPExpression expr;
}
{
  expr = PrimaryExpression()
  
  {
    expr = Selector(expr);
   }
  
  {return expr; }
}

SPExpression PrimaryExpression() :
{
  SPExpression expr;
}
{
	<IDENTIFIER> {  expr = new SPVariable(token.beginLine, token.image); }
|
	<LPAREN> { expr = Expression(); } <RPAREN>
|
	{ expr = Literal(); }
  
{return expr; }
}

SPExpression Selector(SPExpression expr) :
{
  SPExpression select;
  ArrayList<SPExpression> indexExpressions = new ArrayList<SPExpression>();
  SPExpression indexExpression;
}
{
try{
  <LBRACKET>
  
  { 
    indexExpression = Expression();
    indexExpressions.add(indexExpression);
  }
  
  ( <COMMA>
    { 
      indexExpression = Expression();
      indexExpressions.add(indexExpression);
     }
  )*
  
  <RBRACKET>
  
  { 
    select = new SPArrayExpression(line, expr, indexExpressions);
    return select; 
  }
  }
  catch(Exception e){
  return expr;
  }
}

SPExpression Literal() :
{
  SPexpression expr;
}
{
  <INTEGER_LITERAL> { expr = new SPLiteralInt(token.beginLine, token.image); }
|
  <FLOATING_POINT_LITERAL> { expr = new SPLiteralDecimal(token.beginLine, token.image); }
|
  <STRING_LITERAL> { expr = new SPLiteralString(token.beginLine, token.image); }
|
  { expr = BooleanLiteral(); }
  
 {return expr; }
}

SPExpression BooleanLiteral() :
{
  SPExpression expr;
}
{
  <VERDADEIRO> { expr = new SPLiteralTrue(token.beginLine); }
|
  <FALSO> { expr = new SPLiteralFalse(token.beginLine); }
{ return expr; }
}

void SwitchStatement() :
{}
{
  <ESCOLHA> Expression()
    ( SwitchLabel() ( Statement() )* )*
   <FIMESCOLHA>
}

void SwitchLabel() :
{}
{
  <CASO> Expression() <DDOTS>
|
  <PADRAO> <DDOTS>
}

SPStatement IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
int line;
SPExpression testExpr;
ArrayList<SPStatement> thenStatements = new ArrayList<SPStatement>();
SPStatement thenStatement;
ArrayList<SPStatement> elseStatements = new ArrayList<SPStatement>();
SPStatement elseStatement;
SPStatement thenBlock;
SPStatement elseBlock;
}
{
  <SE> { line = token.beginLine; }
  testExpr = Expression()
  <ENTAO>
    ( 
      thenStatement = Statement()
      {thenStatements.add(thenStatement);}
    )*
    
  [ 
    LOOKAHEAD(1) <SENAO> 
                   (  elseStatement = Statement()
                  {  elseStatements.add(elseStatement); } )*
                 
  ] 
  <FIMSE>
  {
    thenBlock = new SPBlock(line, thenStatements);
    elseBlock = new SPBlock(line, elseStatements);
    return new SPIfStatement(line, test, thenBlock, elseBlock);
   }
}

SPStatement WhileStatement() :
{
SPStatement statement;
ArrayList<SPStatement> body = new ArrayList<SPStatement>();
int line;
SPExpression condition;
}
{
  <ENQUANTO> 
  { line = token.beginLine;
  condition = Expression(); }
  <FACA> 
  ( statement = Statement()
    {body.add(statement);})*
   
  <FIMENQUANTO>
  {
  return new SPWhileStatement(line, condition, new SPBlock(line, body));
  }
}

SPStatement DoStatement() :
{
SPExpression condition;
SPStatement statement;
ArrayList<SPStatement> block = new ArrayList<SPStatement>();
int line;
}
{
  <REPITA> {line = token.beginLine; } 
  (statement = Statement()
  { block.add(statement); })*
  <ATE>
  {
  condition = Expression(); 
  return new SPDoStatement(line, condition, new SPBlock(line, block));
  }
  
}

SPStatement ForStatement() :
{
int line;
ArrayList<SPStatement> body = new ArrayList<SPStatement>();
SPStatement statement;
SPVariable controlVariable;
SPExpression controlInitExpression;
SPExpression controlEndExpression;
SPStatement controlAssignment;
SPStatement controlVariableInitialization;
SPExpression pace;
SPExpression controlVariableInc;
SPExpression assignControlVariableInc;
SPExpression condition;
SPStatement controlVariableIncStm;
}
{
  <PARA> { line = token.beginLine; }
  <IDENTIFIER> { controlVariable = new SPVariable( token.beginLine, token.image ); }
  <DE> 
  controlInitExpression = Expression() 
  {
    controlAssignment = new SPAssignOp(line, controlVariabel, controlInitExpression);
    controlAssignment.isStatementExpression = true;
    controlVariableInitialization = new SPStatementExpression(line, controlAssignment);
  }
  <ATE> 
  controlEndExpression = Expression()
  { pace = new SPLiteralInt(line, "1");}
  [
  <PASSO>
  pace = Expression()
  ] 
  <FACA> 
  (statement = Statement()
  {body.add(statement);})*
   <FIMPARA>
   {
   controlVariableInc = new SPPlusOp(line, controlVariabel, pace);
   assignControlVariableInc = new SPAssignOp(line, controlVariabel, controlVariableInc);
   assignControlVariableInc.isStatementExpression = true;
   controlVariableIncStm = new SPStatementExpression(line, assignControlVariableInc);
   condition = new SPGreaterThanOp(line, controlVariabel, controlLimit);
   return new SPForStatement(line, controlVariableInitialization, controlVariableIncStm, condition, new SPBlock(line, body));
   }
}

void BreakStatement() :
{}
{
  <PARAR>
}

void ContinueStatement() :
{}
{
  <CONTINUAR>
}

void ReturnStatement() :
{}
{
  <RETORNA> Expression()
}

void WriteStatement() :
{}
{
	(<ESCREVA> | <ESCREVAL>) <LPAREN> Expression() ( <COMMA> Expression() )* <RPAREN>
}

void ReadStatement() :
{}
{
	<LEIA> <LPAREN> UnaryExpression() (<COMMA> UnaryExpression())* <RPAREN>
}

/*STATEMENTS*/