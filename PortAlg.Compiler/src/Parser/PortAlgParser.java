/* PortAlgParser.java */
/* Generated By:JavaCC: Do not edit this line. PortAlgParser.java */
package Parser;

import AST.*;
import java.util.UUID;
import java.util.ArrayList;
import java.util.Arrays;

class PortAlgParser implements PortAlgParserConstants {
         public static void main(String args[]) {
    PortAlgParser parser;
        int version = 0;
        int rebuild = 0;
        int commit = 10;
    if (args.length == 0) {
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Reading from standard input . . .");
      parser = new PortAlgParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Reading from file " + args[0] + " . . .");
      try {
        parser = new PortAlgParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Usage is one of:");
      System.out.println("         java PortAlgParser < inputfile");
      System.out.println("OR");
      System.out.println("         java PortAlgParser inputfile");
      return;
    }
    try {
      parser.Specification();
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Algol file parsed successfully.");
    } catch (ParseException e) {
      System.out.println("Portugues Estruturado Parser Version " + version + "." + rebuild + "." + commit + ":  Encountered errors during parse.");
          System.out.println(e.getMessage());
    }
  }

/*PROGRAM SPECIFICATION*/
  static final public 
 SPCompilationUnit Specification() throws ParseException {Token token = null;
  int line = 0;
  String fileName = "";
  ArrayList<SPStatement> arrayInitializers = new ArrayList<SPStatement>();
  ArrayList<SPMember> classBody = new ArrayList<SPMember>();
  ArrayList<String> mods = new ArrayList<String>(Arrays.asList("public", "static"));
  ArrayList<SPVariableDeclarator> variables;
  SPFieldDeclaration fields;
  ArrayList<SPStatement> statements = new ArrayList<SPStatement>();
  SPStatement statement;
  ArrayList<SPFormalParameter> formalParameters = new ArrayList<SPFormalParameter>();
  String[] methodArgs = new String[1];
  Type methodArgsType;
  SPFormalParameter formalParameter;
  SPMember memberDecl;
  SPAST aClass;
  ArrayList<SPAST> typeDeclarations = new ArrayList<SPAST>();
  SPBlock body;
    jj_consume_token(ALGORITMO);
line = token.beginLine;
    fileName = UUID.randomUUID().toString();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(STRING_LITERAL);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCAO:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Function();
    }
variables = VariableInitializer(arrayInitializers);
  try {
    variables.add(new SPVariableDeclarator(0, "sp_inner_scanner", Type.typeFor(Class.forName("java.util.Scanner"))));
  } catch (ClassNotFoundException ex) {
  }
   fields = new SPFieldDeclaration(line, mods, variables);
   classBody.add(fields);
    jj_consume_token(INICIO);
statements.add(new SPScannerDeclarator());
   statements.addAll(arrayInitializers);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCREVA:
      case ESCREVAL:
      case LEIA:
      case SE:
      case REPITA:
      case ENQUANTO:
      case PARA:
      case PARAR:
      case ESCOLHA:
      case CONTINUAR:
      case ASSIGN:
      case PLUS:
      case MINUS:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      statement = Statement();
statements.add(statement);
    }
body = new SPBlock(line, statements);
    jj_consume_token(FIMALGORITMO);
methodArgsType = Type.typeFor(methodArgs.getClass());

        formalParameter = new SPFormalParameter(line, "args", methodArgsType);

        formalParameters.add(formalParameter);

        memberDecl = new SPMethodDeclaration(line, mods, "main", Type.VOID, formalParameters, body);

        classBody.add(memberDecl);

        aClass = typeDeclaration(fileName, classBody);

        typeDeclarations.add(aClass);

        {if ("" != null) return new SPCompilationUnit(fileName, line, null, null, typeDeclarations);}
    throw new Error("Missing return statement in function");
  }

  static final public void Function() throws ParseException {
    jj_consume_token(FUNCAO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      jj_consume_token(VAR);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCREVA:
      case ESCREVAL:
      case LEIA:
      case SE:
      case REPITA:
      case ENQUANTO:
      case PARA:
      case PARAR:
      case ESCOLHA:
      case CONTINUAR:
      case ASSIGN:
      case PLUS:
      case MINUS:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      Statement();
    }
    jj_consume_token(FIMFUNCAO);
  }

/*PROGRAM SPECIFICATION*/

/*VARIABLES DECLARATION BLOCK*/
  static final public 
ArrayList<SPVariableDeclarator> VariableInitializer(ArrayList<SPStatement> arrayInitializers) throws ParseException {
    jj_consume_token(VAR);
{if ("" != null) return VariableDeclarations(arrayInitializers);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<SPVariableDeclarator> VariableDeclarations(ArrayList<SPStatement> arrayInitializers) throws ParseException {ArrayList<SPVariableDeclarator> variables = new ArrayList<SPVariableDeclarator>();
  ArrayList<SPVariableDeclarator> typeVariables = null;
  Type type = null;
  ArrayList<SPExpression> dimensionsBounds = new ArrayList<SPExpression>();
  ArrayList<SPExpression> lowerBounds = new ArrayList<SPExpression>();
  int line = 0;
  SPExpression lowerBound = null;
  SPExpression upperBound = null;
  SPExpression dimensionBounds = null;
  boolean isArray = false;
  SPNewArrayOp newArray = null;
  SPExpression lhs = null;
  SPAssignment assignmentExpression = null;
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
typeVariables = VariableDeclaratorId();
      jj_consume_token(DDOTS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VETOR:{
        jj_consume_token(VETOR);
line = token.beginLine; isArray = true;
        jj_consume_token(LBRACKET);
        jj_consume_token(INTEGER_LITERAL);
lowerBound = new SPLiteralInt(token.beginLine, token.image);
        jj_consume_token(DOUBLEDOT);
        jj_consume_token(INTEGER_LITERAL);
upperBound = new SPLiteralInt(token.beginLine, token.image);
                                       dimensionBounds = new SPPlusOp(token.beginLine, new SPSubtractOp(token.beginLine, upperBound, lowerBound), new SPLiteralInt(token.beginLine, "1"));
                                      dimensionsBounds.add(dimensionBounds);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          jj_consume_token(INTEGER_LITERAL);
lowerBound = new SPLiteralInt(token.beginLine, token.image);
          jj_consume_token(DOUBLEDOT);
          jj_consume_token(INTEGER_LITERAL);
upperBound = new SPLiteralInt(token.beginLine, token.image);
                                       dimensionBounds = new SPPlusOp(token.beginLine, new SPSubtractOp(token.beginLine, upperBound, lowerBound), new SPLiteralInt(token.beginLine, "1"));
                                      dimensionsBounds.add(dimensionBounds);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(DE);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
type = Type();

                if(isArray){
                  type = new ArrayTypeName(type, dimensionsBounds.size());
                  newArray = new SPNewArrayOp(line, type, dimensionsBounds, lowerBounds);
                }

                for(SPVariableDeclarator variable : typeVariables){
                  variable.setType(type);
                  variables.add(variable);

                  if(isArray){
                    lhs = new SPVariable(variable.line(), variable.getName());
                    assignmentExpression = new SPAssignOp(variable.line(), null, null);
                    assignmentExpression.setLhs(lhs);
                    assignmentExpression.setRhs(newArray);
                    assignmentExpression.isStatementExpression = true;
                    arrayInitializers.add(new SPStatementExpression(variable.line(), assignmentExpression));
                  }
                }
    }
{if ("" != null) return variables;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<SPVariableDeclarator> VariableDeclaratorId() throws ParseException {
{if ("" != null) return NameList();}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<SPVariableDeclarator> NameList() throws ParseException {ArrayList<SPVariableDeclarator> variables = new ArrayList<SPVariableDeclarator>();
SPVariableDeclarator variable = null;
    variable = Name();
variables.add(variable);
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      variable = Name();
variables.add(variable);
    }
{if ("" != null) return variables;}
    throw new Error("Missing return statement in function");
  }

  static final public SPVariableDeclarator Name() throws ParseException {int line = 0;
String name = "";
    jj_consume_token(IDENTIFIER);
line = token.beginLine;
   name = token.image;
{if ("" != null) return new SPVariableDeclarator(line, name, null);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {Type type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOGICO:{
      jj_consume_token(LOGICO);
type = Type.BOOLEAN;
      break;
      }
    case INTEIRO:{
      jj_consume_token(INTEIRO);
type = Type.INT;
      break;
      }
    case DECIMAL:{
      jj_consume_token(DECIMAL);
type = Type.DOUBLE;
      break;
      }
    case LITERAL:{
      jj_consume_token(LITERAL);
type = Type.STRING;
{if ("" != null) return type;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*VARIABLES DECLARATION BLOCK*/

/*STATEMENTS*/
  static final public 
SPStatement Statement() throws ParseException {SPStatement statement = null;
    if (jj_2_3(2)) {
      statement = StatementExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCOLHA:{
        statement = SwitchStatement();
        break;
        }
      case SE:{
        statement = IfStatement();
        break;
        }
      case ENQUANTO:{
        statement = WhileStatement();
        break;
        }
      case REPITA:{
        statement = DoStatement();
        break;
        }
      case PARA:{
        statement = ForStatement();
        break;
        }
      case PARAR:{
        statement = BreakStatement();
        break;
        }
      case CONTINUAR:{
        statement = ContinueStatement();
        break;
        }
      case ESCREVA:
      case ESCREVAL:{
        statement = WriteStatement();
        break;
        }
      case LEIA:{
        statement = ReadStatement();
{if ("" != null) return statement;}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void StatementExpression() throws ParseException {SPExpression lhs;
int line;
SPAssignment assignmentExpression;
SPExpression rhs;
    lhs = UnaryExpression();
line = token.beginLine;
    assignmentExpression = AssignmentOperator();
    rhs = Expression();
assignmentExpression.setLhs(lhs);
    assignmentExpression.setRhs(rhs);

    {if ("" != null) return new SPStatementExpression(line, assignmentExpression);}
  }

  static final public SPAssignment AssignmentOperator() throws ParseException {SPAssignment assignExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
assignExpression = new SPAssignOp(token.beginLine, null, null);
    assignExpression.isStatementExpression = true;
      break;
      }
    case STARASSIGN:{
      jj_consume_token(STARASSIGN);
      break;
      }
    case SLASHASSIGN:{
      jj_consume_token(SLASHASSIGN);
      break;
      }
    case REMASSIGN:{
      jj_consume_token(REMASSIGN);
      break;
      }
    case PLUSASSIGN:{
      jj_consume_token(PLUSASSIGN);
      break;
      }
    case MINUSASSIGN:{
      jj_consume_token(MINUSASSIGN);
      break;
      }
    case ANDASSIGN:{
      jj_consume_token(ANDASSIGN);
      break;
      }
    case XORASSIGN:{
      jj_consume_token(XORASSIGN);
      break;
      }
    case ORASSIGN:{
      jj_consume_token(ORASSIGN);
{if ("" != null) return assignExpression;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression Expression() throws ParseException {
{if ("" != null) return ConditionalOrExpression();}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression ConditionalOrExpression() throws ParseException {int line;
SPExpression lhs;
SPExpression rhs;
    lhs = ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      jj_consume_token(SC_OR);
rhs = ConditionalAndExpression();
      lhs = new SPLogicalOrOp(line, lhs, rhs);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression ConditionalAndExpression() throws ParseException {int line;
  SPExpression lhs;
  SPExpression rhs;
    lhs = EqualityExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      jj_consume_token(SC_AND);
rhs = EqualityExpression();
      lhs = new SPLogicalAndOp(line, lhs, rhs);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression EqualityExpression() throws ParseException {int line;
  SPExpression lhs;
  SPExpression rhs;
  boolean equal = false;
    lhs = RelationalExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
equal = true;
        break;
        }
      case NE:{
        jj_consume_token(NE);
equal = false;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
rhs = RelationalExpression();
      if(equal){
        lhs = new SPEqualOp(line, lhs, rhs);
      } else{
        lhs = new SPNotEqualOp(line, lhs, rhs);
      }
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression RelationalExpression() throws ParseException {int line;
  SPExpression lhs;
  SPExpression rhs;
  int operation = 0;
    lhs = AdditiveExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
operation = 1;
        break;
        }
      case GT:{
        jj_consume_token(GT);
operation = 2;
        break;
        }
      case LE:{
        jj_consume_token(LE);
operation = 3;
        break;
        }
      case GE:{
        jj_consume_token(GE);
operation = 4;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
rhs = AdditiveExpression();
      switch(operation){
        case 1 : { lhs = new SPLessThanOp(line, lhs, rhs);
                   break; }
        case 2 : { lhs = new SPGreaterThanOp(line, lhs, rhs);
                   break; }
        case 3 : { lhs = new SPLessEqualOp(line, lhs, rhs);
                   break; }
        default : { lhs = new SPGreaterOp(line, lhs, rhs);
                   break; }
      }
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression AdditiveExpression() throws ParseException {int line;
SPExpression lhs;
SPExpression rhs;
boolean sum = false;
    lhs = MultiplicativeExpression();
    label_11:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
sum = true;
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
sum = false;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
rhs = MultiplicativeExpression();
        if(sum){
          lhs = new SPPlusOp(line, lhs, rhs);
        } else {
          lhs = new SPSubtractOp(line, lhs, rhs);
        }
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression MultiplicativeExpression() throws ParseException {int line;
  SPExpression lhs;
  SPExpression rhs;
    lhs = PowerExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:
      case CSLASH:
      case REM:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
lhs = new SPMultiplyOp(line, lhs, null);
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
lhs = new SPDivisionOp(line, lhs, null);
        break;
        }
      case REM:{
        jj_consume_token(REM);
lhs = new SPMultiplyOp(line, lhs, null);
        break;
        }
      case CSLASH:{
        jj_consume_token(CSLASH);
lhs = new SPMultiplyOp(line, lhs, null);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
rhs = PowerExpression();
        lhs.setRhs(rhs);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression PowerExpression() throws ParseException {int line;
SPExpression lhs;
SPExpression rhs;
    lhs = UnaryExpression();
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression UnaryExpression() throws ParseException {int line;
  SPExpression expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
expr = UnaryExpression();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
expr = PostfixExpression();
{if ("" != null) return expr;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression PostfixExpression() throws ParseException {SPExpression expr;
    expr = PrimaryExpression();
expr = Selector(expr);
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression PrimaryExpression() throws ParseException {SPExpression expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
expr = new SPVariable(token.beginLine, token.image);
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
expr = Expression();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
expr = Literal();
{if ("" != null) return expr;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression Selector(SPExpression expr) throws ParseException {SPExpression select;
  ArrayList<SPExpression> indexExpressions = new ArrayList<SPExpression>();
  SPExpression indexExpression;
    try {
      jj_consume_token(LBRACKET);
indexExpression = Expression();
    indexExpressions.add(indexExpression);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
indexExpression = Expression();
      indexExpressions.add(indexExpression);
      }
      jj_consume_token(RBRACKET);
select = new SPArrayExpression(line, expr, indexExpressions);
    {if ("" != null) return select;}
    } catch (Exception e) {
{if ("" != null) return expr;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression Literal() throws ParseException {SPexpression expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
expr = new SPLiteralInt(token.beginLine, token.image);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
expr = new SPLiteralDecimal(token.beginLine, token.image);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
expr = new SPLiteralString(token.beginLine, token.image);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
expr = BooleanLiteral();
{if ("" != null) return expr;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public SPExpression BooleanLiteral() throws ParseException {SPExpression expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VERDADEIRO:{
      jj_consume_token(VERDADEIRO);
expr = new SPLiteralTrue(token.beginLine);
      break;
      }
    case FALSO:{
      jj_consume_token(FALSO);
expr = new SPLiteralFalse(token.beginLine);
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void SwitchStatement() throws ParseException {
    jj_consume_token(ESCOLHA);
    Expression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASO:
      case PADRAO:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_14;
      }
      SwitchLabel();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ESCREVA:
        case ESCREVAL:
        case LEIA:
        case SE:
        case REPITA:
        case ENQUANTO:
        case PARA:
        case PARAR:
        case ESCOLHA:
        case CONTINUAR:
        case ASSIGN:
        case PLUS:
        case MINUS:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_15;
        }
        Statement();
      }
    }
    jj_consume_token(FIMESCOLHA);
  }

  static final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASO:{
      jj_consume_token(CASO);
      Expression();
      jj_consume_token(DDOTS);
      break;
      }
    case PADRAO:{
      jj_consume_token(PADRAO);
      jj_consume_token(DDOTS);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public SPStatement IfStatement() throws ParseException {int line;
SPExpression testExpr;
ArrayList<SPStatement> thenStatements = new ArrayList<SPStatement>();
SPStatement thenStatement;
ArrayList<SPStatement> elseStatements = new ArrayList<SPStatement>();
SPStatement elseStatement;
SPStatement thenBlock;
SPStatement elseBlock;
    jj_consume_token(SE);
line = token.beginLine;
    testExpr = Expression();
    jj_consume_token(ENTAO);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCREVA:
      case ESCREVAL:
      case LEIA:
      case SE:
      case REPITA:
      case ENQUANTO:
      case PARA:
      case PARAR:
      case ESCOLHA:
      case CONTINUAR:
      case ASSIGN:
      case PLUS:
      case MINUS:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_16;
      }
      thenStatement = Statement();
thenStatements.add(thenStatement);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SENAO:{
      jj_consume_token(SENAO);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ESCREVA:
        case ESCREVAL:
        case LEIA:
        case SE:
        case REPITA:
        case ENQUANTO:
        case PARA:
        case PARAR:
        case ESCOLHA:
        case CONTINUAR:
        case ASSIGN:
        case PLUS:
        case MINUS:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_17;
        }
        elseStatement = Statement();
elseStatements.add(elseStatement);
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(FIMSE);
thenBlock = new SPBlock(line, thenStatements);
    elseBlock = new SPBlock(line, elseStatements);
    {if ("" != null) return new SPIfStatement(line, test, thenBlock, elseBlock);}
    throw new Error("Missing return statement in function");
  }

  static final public SPStatement WhileStatement() throws ParseException {SPStatement statement;
ArrayList<SPStatement> body = new ArrayList<SPStatement>();
int line;
SPExpression condition;
    jj_consume_token(ENQUANTO);
line = token.beginLine;
  condition = Expression();
    jj_consume_token(FACA);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCREVA:
      case ESCREVAL:
      case LEIA:
      case SE:
      case REPITA:
      case ENQUANTO:
      case PARA:
      case PARAR:
      case ESCOLHA:
      case CONTINUAR:
      case ASSIGN:
      case PLUS:
      case MINUS:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_18;
      }
      statement = Statement();
body.add(statement);
    }
    jj_consume_token(FIMENQUANTO);
{if ("" != null) return new SPWhileStatement(line, condition, new SPBlock(line, body));}
    throw new Error("Missing return statement in function");
  }

  static final public SPStatement DoStatement() throws ParseException {SPExpression condition;
SPStatement statement;
ArrayList<SPStatement> block = new ArrayList<SPStatement>();
int line;
    jj_consume_token(REPITA);
line = token.beginLine;
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCREVA:
      case ESCREVAL:
      case LEIA:
      case SE:
      case REPITA:
      case ENQUANTO:
      case PARA:
      case PARAR:
      case ESCOLHA:
      case CONTINUAR:
      case ASSIGN:
      case PLUS:
      case MINUS:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_19;
      }
      statement = Statement();
block.add(statement);
    }
    jj_consume_token(ATE);
condition = Expression();
  {if ("" != null) return new SPDoStatement(line, condition, new SPBlock(line, block));}
    throw new Error("Missing return statement in function");
  }

  static final public SPStatement ForStatement() throws ParseException {int line;
ArrayList<SPStatement> body = new ArrayList<SPStatement>();
SPStatement statement;
SPVariable controlVariable;
SPExpression controlInitExpression;
SPExpression controlEndExpression;
SPStatement controlAssignment;
SPStatement controlVariableInitialization;
SPExpression pace;
SPExpression controlVariableInc;
SPExpression assignControlVariableInc;
SPExpression condition;
SPStatement controlVariableIncStm;
    jj_consume_token(PARA);
line = token.beginLine;
    jj_consume_token(IDENTIFIER);
controlVariable = new SPVariable( token.beginLine, token.image );
    jj_consume_token(DE);
    controlInitExpression = Expression();
controlAssignment = new SPAssignOp(line, controlVariabel, controlInitExpression);
    controlAssignment.isStatementExpression = true;
    controlVariableInitialization = new SPStatementExpression(line, controlAssignment);
    jj_consume_token(ATE);
    controlEndExpression = Expression();
pace = new SPLiteralInt(line, "1");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PASSO:{
      jj_consume_token(PASSO);
      pace = Expression();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(FACA);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCREVA:
      case ESCREVAL:
      case LEIA:
      case SE:
      case REPITA:
      case ENQUANTO:
      case PARA:
      case PARAR:
      case ESCOLHA:
      case CONTINUAR:
      case ASSIGN:
      case PLUS:
      case MINUS:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_20;
      }
      statement = Statement();
body.add(statement);
    }
    jj_consume_token(FIMPARA);
controlVariableInc = new SPPlusOp(line, controlVariabel, pace);
   assignControlVariableInc = new SPAssignOp(line, controlVariabel, controlVariableInc);
   assignControlVariableInc.isStatementExpression = true;
   controlVariableIncStm = new SPStatementExpression(line, assignControlVariableInc);
   condition = new SPGreaterThanOp(line, controlVariabel, controlLimit);
   {if ("" != null) return new SPForStatement(line, controlVariableInitialization, controlVariableIncStm, condition, new SPBlock(line, body));}
    throw new Error("Missing return statement in function");
  }

  static final public void BreakStatement() throws ParseException {
    jj_consume_token(PARAR);
  }

  static final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUAR);
  }

  static final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETORNA);
    Expression();
  }

  static final public SPStatement WriteStatement() throws ParseException {int line;
  boolean writeLine = false;
  SPExpression expression;
  ArrayList<SPExpression> expressionList = new ArrayList<SPExpression>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ESCREVA:{
      jj_consume_token(ESCREVA);
line = token.beginLine; writeLine = false;
      break;
      }
    case ESCREVAL:{
      jj_consume_token(ESCREVAL);
line = token.beginLine; writeLine = true;
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    expression = Expression();
expressionList.add(expression);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      expression = Expression();
expressionList.add(expression);
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new SPWriteStatement(line, writeLine, expressionList);}
    throw new Error("Missing return statement in function");
  }

//TODO: Fazer leitura direta em posição de vetor/matriz
  static final public SPStatement ReadStatement() throws ParseException {int line;
SPExpression expression;
ArrayList<SPExpression> expressionList = new ArrayList<SPExpression>();
    jj_consume_token(LEIA);
line = token.beginLine;
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
expression = new SPVariable(token.beginLine, token.image);
  expressionList.add(expression);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
expression = new SPVariable(token.beginLine, token.image);
    expressionList.add(expression);
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new SPReadStatement(line, expressionList, new SPVariable(line, "sp_inner_scanner"));}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(VETOR)) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  static private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_3R_28()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(DDOTS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_31()
 {
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PortAlgParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x8f000000,0x4000,0x8f000000,0x0,0x100000,0xe0000,0x8f000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00000,0x0,0x8f000000,0x0,0x8f000000,0x8f000000,0x40000000,0x8f000000,0x8f000000,0x0,0x8f000000,0x3000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800000,0x10000,0x4a12,0x0,0x4a12,0x40000000,0x0,0x2000,0x4a12,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x40000000,0x980000,0x0,0x500,0x4a12,0x500,0x4a12,0x4a12,0x0,0x4a12,0x4a12,0x40000,0x4a12,0x0,0x40000000,0x40000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0xff06004,0x0,0xff06004,0x0,0x0,0x0,0x0,0xff00004,0x200,0x400,0x60,0x60,0x198,0x198,0x6000,0xb8000,0xb8000,0x6000,0x6000,0x10000000,0x0,0x0,0x0,0x0,0xff06004,0x0,0xff06004,0xff06004,0x0,0xff06004,0xff06004,0x0,0xff06004,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PortAlgParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PortAlgParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PortAlgParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PortAlgParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PortAlgParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PortAlgParser(PortAlgParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PortAlgParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[95];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 95; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
